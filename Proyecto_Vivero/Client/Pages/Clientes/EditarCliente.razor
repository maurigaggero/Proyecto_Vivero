@page "/editar-cliente/{idcliente:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

@using Proyecto_Vivero.Shared

<div class="d-flex justify-content-between m-2">
    <h2><b>Editar cliente</b></h2>
    <button @onclick="@(() => BorrarCliente(cliente.Id))" class="btn btn-danger">
        <i class="oi oi-trash"></i> Eliminar cliente
    </button>
</div>

<ComponenteFormCliente cliente="cliente" OnValidSubmit="@EditarClient"
                       oculta="oculta" TextBotonSubmit=" Editar Cliente" />

@if (cuenta.Count != 0)
{
    <hr />
    <div class="card">
        <div class="card-body">
            <h3 class="m-1">Movimientos</h3>
            <table class="table table-hover m-1">
                <thead class="thead-dark">
                    <tr>
                        <th>Comprobante</th>
                        <th>Fecha</th>
                        <th>Concepto</th>
                        <th>Importe</th>
                        <th>Saldo Parcial</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@cuenta" Context="cuenta">
                        <tr @key="cuenta.Id">
                            <td>
                                @if (cuenta.PagoId == null)
                                {
                                    <a href="ver-venta/@cuenta.VentaId" class="btn btn-sm btn-primary">Ver</a>
                                }
                                @if (cuenta.VentaId == null)
                                {
                                    <a href="ver-pago/@cuenta.PagoId" class="btn btn-sm btn-primary">Ver</a>
                                }
                            </td>
                            <td>@cuenta.Fecha</td>
                            <td>@cuenta.Concepto</td>
                            @if (cuenta.Concepto == CuentaCorriente.Conceptos.Debe)
                            {
                                <td><b>+@cuenta.Importe</b></td>
                            }
                            else
                            {
                                <td><b>@cuenta.Importe</b></td>
                            }
                            <td>@cuenta.Saldo_Parcial</td>
                        </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
    </div>
    <hr />
}

@code {
    public Cliente cliente = new Cliente();
    public List<CuentaCorriente> cuenta { get; set; } = new List<CuentaCorriente>();

    [Parameter] public int idcliente { get; set; }
    public bool oculta = true;

    protected async override Task OnParametersSetAsync()
    {
        cliente = await Http.GetFromJsonAsync<Cliente>($"api/clientes/{idcliente}");
        cuenta = await Http.GetFromJsonAsync<List<CuentaCorriente>>($"api/cuentascorrientes/porcliente/{idcliente}");
    }

    async Task BorrarCliente(int idcliente)
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Eliminar",
            $"¿Desea eliminar cliente {cliente.NombreyApellido}?", "warning");
        if (confirmacion)
        {
            var respuesta = await Http.DeleteAsync($"api/clientes/{idcliente}");

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!",
                    "Cliente eliminado", "success");
                NavigationManager.NavigateTo("/lista-clientes");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    "No se pudo eliminar cliente", "error");
            }
        }
    }

    async Task EditarClient()
    {
        var confirmacion = await JS.InvokeAsync<bool>("confirmar", "Editar",
            $"¿Desea editar {cliente.NombreyApellido}?", "question");
        if (confirmacion)
        {
            var respuesta = await Http.PutAsJsonAsync("api/clientes", cliente);

            if (respuesta.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("simple", "¡Éxito!",
                    "Cliente editado", "success");
                NavigationManager.NavigateTo("/lista-clientes");
            }
            else
            {
                await JS.InvokeVoidAsync("simple", "Error",
                    $"No se pudo editar cliente", "error");
            }
        }
    }
}